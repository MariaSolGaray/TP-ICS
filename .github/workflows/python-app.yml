name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias
        run: |
          pip install -r requirements.txt

      - name: Revisar estilo con Flake8
        run: |
          flake8 . --max-line-length=88 > flake8.log

      - name: Notificar error Flake8 en Slack
        if: failure()
        run: |
          ERROR_MSG=$(head -20 flake8.log | sed ':a;N;$!ba;s/\n/\\n/g')
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"❌ Falló Flake8:\n\`\`\`${ERROR_MSG}\`\`\`\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ejecutar tests con pytest y guardar salida
        continue-on-error: true
        run: |
          pytest --tb=short | tee pytest.log echo "${PIPESTATUS[0]}" > pytest_status

      - name: Notificar error pytest en Slack
        run: |
          STATUS=$(cat pytest_status)
          if [ "$STATUS" != "0" ]; then
            ERROR_MSG=$(grep -A 5 -E 'FAILURES|ERRORS' pytest.log | head -20 | sed ':a;N;$!ba;s/\n/\\n/g')
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"❌ Falló un test en pytest:\n\`\`\`${ERROR_MSG}\`\`\`\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
            exit 1
          else
            echo "✅ Todos los tests pasaron"
            exit 0
          fi

      - name: Deploy automático a Render
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

      - name: Notificar a Slack
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="✅ Build exitosa y despliegue hecho en Render "
          else
            MESSAGE="❌ Build fallida. Revisar errores "
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"${MESSAGE}\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Mover tarjeta Trello según commit
        if: github.event_name == 'push'
        run: |
          # Recorre todos los commits del push
          echo '${{ toJson(github.event.commits) }}' | jq -c '.[]' | while read commit; do
            MSG=$(echo "$commit" | jq -r '.message')
            # Busca patrón: número| #done o número| #doing
            if [[ "$MSG" =~ ^([0-9]+)\|[[:space:]]*#(done|doing) ]]; then
              CARD_NUMBER="${BASH_REMATCH[1]}"
              STATUS="${BASH_REMATCH[2]}"
              # Busca la tarjeta por nombre que empieza con el número y |
              CARD_ID=$(curl -s "https://api.trello.com/1/boards/${{ secrets.TRELLO_BOARD_ID }}/cards?key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}" | jq -r ".[] | select(.name | test(\"^$CARD_NUMBER\\\\|\")) | .id")
              if [ -n "$CARD_ID" ]; then
                if [ "$STATUS" = "done" ]; then
                  LIST_ID="${{ secrets.TRELLO_DONE_LIST_ID }}"
                else
                  LIST_ID="${{ secrets.TRELLO_DOING_LIST_ID }}"
                fi
                # Mueve la tarjeta a la lista correspondiente
                curl -s -X PUT "https://api.trello.com/1/cards/$CARD_ID?idList=$LIST_ID&key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}"
                echo "Tarjeta $CARD_NUMBER movida a $STATUS"
              else
                echo "No se encontró tarjeta para $CARD_NUMBER"
              fi
            fi
          done
        env:
          TRELLO_API_KEY: ${{ secrets.TRELLO_API_KEY }}
          TRELLO_TOKEN: ${{ secrets.TRELLO_TOKEN }}
          TRELLO_BOARD_ID: ${{ secrets.TRELLO_BOARD_ID }}
          TRELLO_DOING_LIST_ID: ${{ secrets.TRELLO_DOING_LIST_ID }}
          TRELLO_DONE_LIST_ID: ${{ secrets.TRELLO_DONE_LIST_ID }}

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias
        run: |
          pip install -r requirements.txt

      - name: Analizar con SonarCloud
        id: sonar
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Notificar error SonarCloud en Slack
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"❌ Falló el análisis de SonarCloud.\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
