name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci-checks:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias
        run: |
          pip install -r requirements.txt

      - name: Verificar instalación de httpx
        run: |
          pip show httpx

      - name: Revisar estilo con Flake8
        run: |
          flake8 . --max-line-length=88 > flake8.log

      - name: Notificar error Flake8 en Slack
        if: failure()
        run: |
          ERROR_MSG=$(head -20 flake8.log | sed ':a;N;$!ba;s/\n/\\n/g')
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"❌ Falló Flake8:\n\`\`\`${ERROR_MSG}\`\`\`\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ejecutar tests con pytest y notificar si fallan
        run: |
          set +e
          pytest --tb=short > pytest.log
          STATUS=$?
          set -e

          if [ "$STATUS" -ne 0 ]; then
            ERROR_MSG=$(grep -A 5 -E 'FAILURES|ERRORS' pytest.log | head -20 | sed ':a;N;$!ba;s/\n/\\n/g')
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"❌ Falló un test en pytest:\n\`\`\`${ERROR_MSG}\`\`\`\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
            exit 1
          else
            echo "✅ Tests pasaron correctamente"
            exit 0
          fi

      - name: Generar reporte de cobertura
        run: |
          pip install coverage
          coverage run -m pytest
          coverage xml

      - name: Analizar con SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Notificar error SonarCloud en Slack
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"❌ Falló el análisis de SonarCloud.\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Esperar resultados de Quality Gate
        run: |
          sleep 20  # Espera a que SonarCloud procese el análisis

      - name: Verificar estado de Quality Gate en SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="MariaSolGaray_TP-ICS"  # Cambia esto por el Project Key de SonarCloud si es diferente
          STATUS=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$MariaSolGaray_TP-ICS" | jq -r .projectStatus.status)
          echo "Quality Gate status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"❌ Quality Gate fallido en SonarCloud para $PROJECT_KEY. Estado: $STATUS\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
            exit 1
          fi

      - name: Notificar a Slack
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="✅ Build exitosa y lista para deploy"
          else
            MESSAGE="❌ Build fallida. Revisar errores"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"${MESSAGE}\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Mover tarjeta Trello según commit
        if: github.event_name == 'push'
        run: |
          echo '${{ toJson(github.event.commits) }}' | jq -c '.[]' | while read commit; do
            MSG=$(echo "$commit" | jq -r '.message')
            if [[ "$MSG" =~ ^([0-9]+)\|[[:space:]]*#(done|doing) ]]; then
              CARD_NUMBER="${BASH_REMATCH[1]}"
              STATUS="${BASH_REMATCH[2]}"
              CARD_ID=$(curl -s "https://api.trello.com/1/boards/${{ secrets.TRELLO_BOARD_ID }}/cards?key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}" | jq -r ".[] | select(.name | test(\"^$CARD_NUMBER\\\\|\")) | .id")
              if [ -n "$CARD_ID" ]; then
                if [ "$STATUS" = "done" ]; then
                  LIST_ID="${{ secrets.TRELLO_DONE_LIST_ID }}"
                else
                  LIST_ID="${{ secrets.TRELLO_DOING_LIST_ID }}"
                fi
                curl -s -X PUT "https://api.trello.com/1/cards/$CARD_ID?idList=$LIST_ID&key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}"
                echo "Tarjeta $CARD_NUMBER movida a $STATUS"
              else
                echo "No se encontró tarjeta para $CARD_NUMBER"
              fi
            fi
          done

  deploy:
    name: Despliegue en Render
    needs: ci-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Despliegue
        run: |
          curl -X POST https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
            -d ''

      - name: Verificar estado del despliegue en Render
        id: check_render
        run: |
          for i in {1..10}; do
            DEPLOY_STATUS=$(curl -s -X GET -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys | jq -r '.[0].deploy.status')

            echo "Intento $i - Estado del despliegue: $DEPLOY_STATUS"

            if [ "$DEPLOY_STATUS" == "live" ] || [ "$DEPLOY_STATUS" == "update_failed" ]; then
              echo "status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT
              exit 0
            fi

            sleep 30
          done

          echo "status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT

      - name: Notificar despliegue exitoso
        if: ${{ steps.check_render.outputs.status == 'live' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":" Despliegue exitoso en Render "}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notificar despliegue fallido
        if: ${{ steps.check_render.outputs.status == 'update_failed' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"⚠ El despliegue en Render falló. Revisar el dashboard."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
